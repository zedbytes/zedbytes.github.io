<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ZedBytes</title><link href="http://zedbytes.github.io/" rel="alternate"></link><link href="http://zedbytes.github.io/feeds/web.atom.xml" rel="self"></link><id>http://zedbytes.github.io/</id><updated>2015-04-18T17:52:00+02:00</updated><entry><title>MEAN on WAMP</title><link href="http://zedbytes.github.io/mean-on-wamp.html" rel="alternate"></link><updated>2015-04-18T17:52:00+02:00</updated><author><name>Zeeshan Arif</name></author><id>tag:zedbytes.github.io,2015-04-18:mean-on-wamp.html</id><summary type="html">&lt;p&gt;The most popular, free of charge, open source, web development stack (LAMP) is now facing a new trending technology stack, the MEAN stack.&lt;/p&gt;
&lt;p&gt;As we all know, LAMP is stand for Linux, Apache, MySQL and PHP. While MEAN is stand for MongoDB, ExpressJS, AngularJS, and Node.js.&lt;/p&gt;
&lt;p&gt;In the MEAN stack, the Linux operating system is replaced with any operating system that Node.js can run on. This includes MS Windows, Mac OS, and Linux. The Apache web server is replaced with the Node.js. The MySQL is replaced with MongoDB, which is a No-SQL database. The PHP server side programming language is replaced with the ExpressJS, which basically provides a thin layer of features over Node.js. Here is a key point; the ExpressJS and Node.js in combination are tools to run JavaScript on the server side.&lt;/p&gt;
&lt;p&gt;In the last decade, the JavaScript was, and still is, a mainstream scripting language that runs on the client side (browser) and makes web pages dynamic and responsive. The MEAN stack keep using the JavaScript on the client side by introducing the AngularJS.&lt;/p&gt;
&lt;p&gt;As you might notice, there is no programming language to be used with the MEAN stack other than the JavaScript.&lt;/p&gt;
&lt;p&gt;As the LAMP stack can be changed to a WAMP stack by replacing Linux with Windows, the PHP can be replaced with Python. The MongoDB can be used with the LAMP stack instead of MySQL. What I'm trying to say here is that we can mix different technologies and come up with a brand new stack.&lt;/p&gt;
&lt;p&gt;So, what is the point of creating a new stack? Do we really need to decide which stack to use? Can’t we just use both of them?&lt;/p&gt;
&lt;p&gt;Let me first try to answer the first question, why do we have the MEAN stack? Well, using one programming language makes development much easier. So, if you have a team who can use JavaScript, then that’s it; no need to learn PHP or Python. With MongoDB, we can store our documents in a JSON-­like format, write JSON queries on ExpressJS and NodeJS based server, and pass JSON documents to AngularJS on the client side. Debugging becomes much easier when the objects stored in the database are identical to the objects the client-side JavaScript deal with. These features are some points why we have the MEAN stack.&lt;/p&gt;
&lt;p&gt;On the other hand, critics of the MEAN stack sometimes point out that MongoDB may work well for small to mid-sized apps, but less so for large-scale applications (e.g 100′s of millions of users).&lt;/p&gt;
&lt;p&gt;Last word to say in this article is: there is no VS between the LAMP and MEAN in a way that one stack will take over the other. This is my own perspective and you can claim it is not true.&lt;/p&gt;
&lt;p&gt;Some resources I used in writing this article:&lt;/p&gt;
</summary><category term="PHP"></category><category term="Javascript"></category></entry></feed>