<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ZedBytes</title><link href="http://zedbytes.github.io/" rel="alternate"></link><link href="http://zedbytes.github.io/feeds/all.atom.xml" rel="self"></link><id>http://zedbytes.github.io/</id><updated>2015-04-18T17:53:00+02:00</updated><entry><title>Finally finalize final</title><link href="http://zedbytes.github.io/finally-finalize-final.html" rel="alternate"></link><updated>2015-04-18T17:53:00+02:00</updated><author><name>Zeeshan Arif</name></author><id>tag:zedbytes.github.io,2015-04-18:finally-finalize-final.html</id><summary type="html">&lt;p&gt;final – constant declaration.
&amp;quot;Final&amp;quot; denotes that something cannot be changed. You usually want to use this on static variables that will hold the same value throughout the life of your program.&lt;/p&gt;
&lt;p&gt;&amp;quot;Finally&amp;quot; is used in conjunction with a try/catch block. Anything inside of the &amp;quot;finally&amp;quot; clause will be executed regardless of if the code in the 'try' block throws an exception or not.The finally block always executes when the try block exits, except System.exit(0) call. This ensures that the finally block is executed even if an unexpected exception occurs. But finally is useful for more than just exception handling — it allows the programmer to avoid having cleanup code accidentally bypassed by a return, continue, or break. Putting cleanup code in a finally block is always a good practice, even when no exceptions are anticipated.&lt;/p&gt;
&lt;p&gt;&amp;quot;Finalize&amp;quot; is called by the JVM before an object is about to be garbage collected.  method helps in garbage collection. A method that is invoked before an object is discarded by the garbage collector, allowing it to clean up its state. Should not be used to release non-memory resources like file handles, sockets, database connections etc because Java has only a finite number of these resources and you do not know when the garbage collection is going to kick in to release these non-memory resources through the finalize() method.&lt;/p&gt;
</summary><category term="Java"></category></entry><entry><title>MEAN on WAMP</title><link href="http://zedbytes.github.io/mean-on-wamp.html" rel="alternate"></link><updated>2015-04-18T17:52:00+02:00</updated><author><name>Zeeshan Arif</name></author><id>tag:zedbytes.github.io,2015-04-18:mean-on-wamp.html</id><summary type="html">&lt;p&gt;The most popular, free of charge, open source, web development stack (LAMP) is now facing a new trending technology stack, the MEAN stack.&lt;/p&gt;
&lt;p&gt;As we all know, LAMP is stand for Linux, Apache, MySQL and PHP. While MEAN is stand for MongoDB, ExpressJS, AngularJS, and Node.js.&lt;/p&gt;
&lt;p&gt;In the MEAN stack, the Linux operating system is replaced with any operating system that Node.js can run on. This includes MS Windows, Mac OS, and Linux. The Apache web server is replaced with the Node.js. The MySQL is replaced with MongoDB, which is a No-SQL database. The PHP server side programming language is replaced with the ExpressJS, which basically provides a thin layer of features over Node.js. Here is a key point; the ExpressJS and Node.js in combination are tools to run JavaScript on the server side.&lt;/p&gt;
&lt;p&gt;In the last decade, the JavaScript was, and still is, a mainstream scripting language that runs on the client side (browser) and makes web pages dynamic and responsive. The MEAN stack keep using the JavaScript on the client side by introducing the AngularJS.&lt;/p&gt;
&lt;p&gt;As you might notice, there is no programming language to be used with the MEAN stack other than the JavaScript.&lt;/p&gt;
&lt;p&gt;As the LAMP stack can be changed to a WAMP stack by replacing Linux with Windows, the PHP can be replaced with Python. The MongoDB can be used with the LAMP stack instead of MySQL. What I'm trying to say here is that we can mix different technologies and come up with a brand new stack.&lt;/p&gt;
&lt;p&gt;So, what is the point of creating a new stack? Do we really need to decide which stack to use? Can’t we just use both of them?&lt;/p&gt;
&lt;p&gt;Let me first try to answer the first question, why do we have the MEAN stack? Well, using one programming language makes development much easier. So, if you have a team who can use JavaScript, then that’s it; no need to learn PHP or Python. With MongoDB, we can store our documents in a JSON-­like format, write JSON queries on ExpressJS and NodeJS based server, and pass JSON documents to AngularJS on the client side. Debugging becomes much easier when the objects stored in the database are identical to the objects the client-side JavaScript deal with. These features are some points why we have the MEAN stack.&lt;/p&gt;
&lt;p&gt;On the other hand, critics of the MEAN stack sometimes point out that MongoDB may work well for small to mid-sized apps, but less so for large-scale applications (e.g 100′s of millions of users).&lt;/p&gt;
&lt;p&gt;Last word to say in this article is: there is no VS between the LAMP and MEAN in a way that one stack will take over the other. This is my own perspective and you can claim it is not true.&lt;/p&gt;
&lt;p&gt;Some resources I used in writing this article:&lt;/p&gt;
</summary></entry><entry><title>Dive into Python the hard way !</title><link href="http://zedbytes.github.io/dive-into-python-the-hard-way.html" rel="alternate"></link><updated>2015-04-18T16:58:00+02:00</updated><author><name>Zeeshan Arif</name></author><id>tag:zedbytes.github.io,2015-04-18:dive-into-python-the-hard-way.html</id><summary type="html">&lt;p&gt;Learn Python the Hard Way review
this book is an absolute must for beginner python programmers. Its gets you to code straight away and keeps you on your toes. Its different to some of the other books I have read in that it doesn't go through the theory in depth, its a much more practical approach and makes learning fun. I hope the author writes one for Java because I want to learn that next. I noticed a review below where someone says the author talks to you like your an idiot (the author sounds a bit like an army general in the book), I think this is unfair because Zed Shaw does explain this at the beginning and explicitly say this tone is because the book is aimed for absolute beginners who have no programming knowledge. The author also makes you go away and research a lot of things online, I like this approach because I have been told this is how programmers are trained. Whenever I ask questions on programming forums like stackoverflow I am told to go and read the python documentation, so thats the nature of the game. I think the author tries to embed this habit in the reader from the beginning. I am about half way through and really enjoying it!!&lt;/p&gt;
&lt;p&gt;Dive into Python
This book is perfectly aimed at people who have some experience of programming. It takes for granted that you are familiar with basic concepts of programming in general and object-oriented programming in particular, and gets on with telling you how Python works.
The structure is very hands-on - showing you how to accomplish particular tasks in a very fast, but clear, way.
What I found was that this book finally persuaded me as to Python's strengths.
On top of that it's very readable, and well supported by useful examples that are readily applicable to real world problems.&lt;/p&gt;
</summary><category term="python books"></category></entry></feed>